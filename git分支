3.1 Git 分支

1 分支简介
	几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着可以把你的工作从开发主线上分离开来，以免影响开发主线。
	在很多版本控制系统中，这是一个比较低效的过程常常需要完全创建一个源代码目录的副本。对于大型项目来说，这样的过程会耗费很多
	时间。
	Git的分支模型就是它的必杀技。
	
	git log --oneline --decorate --graph --all：查看分支情况。
	
	checkout 另一目的的撤销或丢弃编辑内容，我们可能有多个文件，但只有一个正确我们想丢这些文件。
	git checkout --文件名 它会清掉最后一次commit的内容。
	git checkout -b newBranchName：新建一个分支并且切换到他。
	
	
2 Merge
	把分支和多条线的历史操作汇聚起来。所有这些分支全部commit的结果，
	对于一个经典的工作流，我们会切换到master分支，然后确认该分支有我们想要的合并的commit.
	
	
3 network
	1 远端(Remotes)
		git remotes add 目的地名字 完整url
		git remotes set-url 目的地名字 新url
		git remotes rm 远端名字
		git remotes -v 
		
		远端追踪的分支则是分支间的中间人，这些分支有一些不同的唯一原因是在所有分支名字前面有一个前缀就是用来响应远程
		控制的，大部分情况加，这个将是 origin/。
	2 fetch
		*git fetch origin:
		命令本身是去github.com抓取任何信息下载下来，把它放在远程追踪分支里。
		*git pull origin:
		pull命令和fetch非常像，它将要拉取东西到origin/分支名称里，然后做合并操作到分支名称的本地版本库里。
		*git push origin
		当我们完成本地工作时，并且我们准备把它发送到github.com，就可以完成。同时更新远程追踪的分支。
		
		
		
	